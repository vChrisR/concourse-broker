// This file was generated by counterfeiter
package buildserverfakes

import (
	"sync"

	"github.com/concourse/atc/api/buildserver"
	"github.com/concourse/atc/db"
)

type FakeBuildsDB struct {
	GetPublicBuildsStub        func(page db.Page) ([]db.Build, db.Pagination, error)
	getPublicBuildsMutex       sync.RWMutex
	getPublicBuildsArgsForCall []struct {
		page db.Page
	}
	getPublicBuildsReturns struct {
		result1 []db.Build
		result2 db.Pagination
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildsDB) GetPublicBuilds(page db.Page) ([]db.Build, db.Pagination, error) {
	fake.getPublicBuildsMutex.Lock()
	fake.getPublicBuildsArgsForCall = append(fake.getPublicBuildsArgsForCall, struct {
		page db.Page
	}{page})
	fake.recordInvocation("GetPublicBuilds", []interface{}{page})
	fake.getPublicBuildsMutex.Unlock()
	if fake.GetPublicBuildsStub != nil {
		return fake.GetPublicBuildsStub(page)
	} else {
		return fake.getPublicBuildsReturns.result1, fake.getPublicBuildsReturns.result2, fake.getPublicBuildsReturns.result3
	}
}

func (fake *FakeBuildsDB) GetPublicBuildsCallCount() int {
	fake.getPublicBuildsMutex.RLock()
	defer fake.getPublicBuildsMutex.RUnlock()
	return len(fake.getPublicBuildsArgsForCall)
}

func (fake *FakeBuildsDB) GetPublicBuildsArgsForCall(i int) db.Page {
	fake.getPublicBuildsMutex.RLock()
	defer fake.getPublicBuildsMutex.RUnlock()
	return fake.getPublicBuildsArgsForCall[i].page
}

func (fake *FakeBuildsDB) GetPublicBuildsReturns(result1 []db.Build, result2 db.Pagination, result3 error) {
	fake.GetPublicBuildsStub = nil
	fake.getPublicBuildsReturns = struct {
		result1 []db.Build
		result2 db.Pagination
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getPublicBuildsMutex.RLock()
	defer fake.getPublicBuildsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBuildsDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ buildserver.BuildsDB = new(FakeBuildsDB)
