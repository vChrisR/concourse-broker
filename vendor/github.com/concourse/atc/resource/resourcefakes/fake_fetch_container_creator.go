// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeFetchContainerCreator struct {
	CreateWithVolumeStub        func(string, worker.Volume, worker.Worker) (worker.Container, error)
	createWithVolumeMutex       sync.RWMutex
	createWithVolumeArgsForCall []struct {
		arg1 string
		arg2 worker.Volume
		arg3 worker.Worker
	}
	createWithVolumeReturns struct {
		result1 worker.Container
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetchContainerCreator) CreateWithVolume(arg1 string, arg2 worker.Volume, arg3 worker.Worker) (worker.Container, error) {
	fake.createWithVolumeMutex.Lock()
	fake.createWithVolumeArgsForCall = append(fake.createWithVolumeArgsForCall, struct {
		arg1 string
		arg2 worker.Volume
		arg3 worker.Worker
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateWithVolume", []interface{}{arg1, arg2, arg3})
	fake.createWithVolumeMutex.Unlock()
	if fake.CreateWithVolumeStub != nil {
		return fake.CreateWithVolumeStub(arg1, arg2, arg3)
	} else {
		return fake.createWithVolumeReturns.result1, fake.createWithVolumeReturns.result2
	}
}

func (fake *FakeFetchContainerCreator) CreateWithVolumeCallCount() int {
	fake.createWithVolumeMutex.RLock()
	defer fake.createWithVolumeMutex.RUnlock()
	return len(fake.createWithVolumeArgsForCall)
}

func (fake *FakeFetchContainerCreator) CreateWithVolumeArgsForCall(i int) (string, worker.Volume, worker.Worker) {
	fake.createWithVolumeMutex.RLock()
	defer fake.createWithVolumeMutex.RUnlock()
	return fake.createWithVolumeArgsForCall[i].arg1, fake.createWithVolumeArgsForCall[i].arg2, fake.createWithVolumeArgsForCall[i].arg3
}

func (fake *FakeFetchContainerCreator) CreateWithVolumeReturns(result1 worker.Container, result2 error) {
	fake.CreateWithVolumeStub = nil
	fake.createWithVolumeReturns = struct {
		result1 worker.Container
		result2 error
	}{result1, result2}
}

func (fake *FakeFetchContainerCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createWithVolumeMutex.RLock()
	defer fake.createWithVolumeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFetchContainerCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.FetchContainerCreator = new(FakeFetchContainerCreator)
