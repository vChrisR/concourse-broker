// This file was generated by counterfeiter
package resourcefakes

import (
	"sync"

	"github.com/concourse/atc/resource"
	"github.com/concourse/atc/worker"
)

type FakeFetcherFactory struct {
	FetcherForStub        func(workerClient worker.Client) resource.Fetcher
	fetcherForMutex       sync.RWMutex
	fetcherForArgsForCall []struct {
		workerClient worker.Client
	}
	fetcherForReturns struct {
		result1 resource.Fetcher
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcherFactory) FetcherFor(workerClient worker.Client) resource.Fetcher {
	fake.fetcherForMutex.Lock()
	fake.fetcherForArgsForCall = append(fake.fetcherForArgsForCall, struct {
		workerClient worker.Client
	}{workerClient})
	fake.recordInvocation("FetcherFor", []interface{}{workerClient})
	fake.fetcherForMutex.Unlock()
	if fake.FetcherForStub != nil {
		return fake.FetcherForStub(workerClient)
	} else {
		return fake.fetcherForReturns.result1
	}
}

func (fake *FakeFetcherFactory) FetcherForCallCount() int {
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	return len(fake.fetcherForArgsForCall)
}

func (fake *FakeFetcherFactory) FetcherForArgsForCall(i int) worker.Client {
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	return fake.fetcherForArgsForCall[i].workerClient
}

func (fake *FakeFetcherFactory) FetcherForReturns(result1 resource.Fetcher) {
	fake.FetcherForStub = nil
	fake.fetcherForReturns = struct {
		result1 resource.Fetcher
	}{result1}
}

func (fake *FakeFetcherFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFetcherFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.FetcherFactory = new(FakeFetcherFactory)
