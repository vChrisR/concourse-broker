// This file was generated by counterfeiter
package inputconfigfakes

import (
	"sync"

	"github.com/concourse/atc/config"
	"github.com/concourse/atc/db/algorithm"
	"github.com/concourse/atc/scheduler/inputmapper/inputconfig"
)

type FakeTransformer struct {
	TransformInputConfigsStub        func(db *algorithm.VersionsDB, jobName string, inputs []config.JobInput) (algorithm.InputConfigs, error)
	transformInputConfigsMutex       sync.RWMutex
	transformInputConfigsArgsForCall []struct {
		db      *algorithm.VersionsDB
		jobName string
		inputs  []config.JobInput
	}
	transformInputConfigsReturns struct {
		result1 algorithm.InputConfigs
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransformer) TransformInputConfigs(db *algorithm.VersionsDB, jobName string, inputs []config.JobInput) (algorithm.InputConfigs, error) {
	var inputsCopy []config.JobInput
	if inputs != nil {
		inputsCopy = make([]config.JobInput, len(inputs))
		copy(inputsCopy, inputs)
	}
	fake.transformInputConfigsMutex.Lock()
	fake.transformInputConfigsArgsForCall = append(fake.transformInputConfigsArgsForCall, struct {
		db      *algorithm.VersionsDB
		jobName string
		inputs  []config.JobInput
	}{db, jobName, inputsCopy})
	fake.recordInvocation("TransformInputConfigs", []interface{}{db, jobName, inputsCopy})
	fake.transformInputConfigsMutex.Unlock()
	if fake.TransformInputConfigsStub != nil {
		return fake.TransformInputConfigsStub(db, jobName, inputs)
	} else {
		return fake.transformInputConfigsReturns.result1, fake.transformInputConfigsReturns.result2
	}
}

func (fake *FakeTransformer) TransformInputConfigsCallCount() int {
	fake.transformInputConfigsMutex.RLock()
	defer fake.transformInputConfigsMutex.RUnlock()
	return len(fake.transformInputConfigsArgsForCall)
}

func (fake *FakeTransformer) TransformInputConfigsArgsForCall(i int) (*algorithm.VersionsDB, string, []config.JobInput) {
	fake.transformInputConfigsMutex.RLock()
	defer fake.transformInputConfigsMutex.RUnlock()
	return fake.transformInputConfigsArgsForCall[i].db, fake.transformInputConfigsArgsForCall[i].jobName, fake.transformInputConfigsArgsForCall[i].inputs
}

func (fake *FakeTransformer) TransformInputConfigsReturns(result1 algorithm.InputConfigs, result2 error) {
	fake.TransformInputConfigsStub = nil
	fake.transformInputConfigsReturns = struct {
		result1 algorithm.InputConfigs
		result2 error
	}{result1, result2}
}

func (fake *FakeTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformInputConfigsMutex.RLock()
	defer fake.transformInputConfigsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ inputconfig.Transformer = new(FakeTransformer)
