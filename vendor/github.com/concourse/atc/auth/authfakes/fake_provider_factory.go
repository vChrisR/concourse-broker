// This file was generated by counterfeiter
package authfakes

import (
	"sync"

	"github.com/concourse/atc/auth"
	"github.com/concourse/atc/auth/provider"
	"github.com/concourse/atc/db"
)

type FakeProviderFactory struct {
	GetProviderStub        func(db.SavedTeam, string) (provider.Provider, bool, error)
	getProviderMutex       sync.RWMutex
	getProviderArgsForCall []struct {
		arg1 db.SavedTeam
		arg2 string
	}
	getProviderReturns struct {
		result1 provider.Provider
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderFactory) GetProvider(arg1 db.SavedTeam, arg2 string) (provider.Provider, bool, error) {
	fake.getProviderMutex.Lock()
	fake.getProviderArgsForCall = append(fake.getProviderArgsForCall, struct {
		arg1 db.SavedTeam
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetProvider", []interface{}{arg1, arg2})
	fake.getProviderMutex.Unlock()
	if fake.GetProviderStub != nil {
		return fake.GetProviderStub(arg1, arg2)
	} else {
		return fake.getProviderReturns.result1, fake.getProviderReturns.result2, fake.getProviderReturns.result3
	}
}

func (fake *FakeProviderFactory) GetProviderCallCount() int {
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	return len(fake.getProviderArgsForCall)
}

func (fake *FakeProviderFactory) GetProviderArgsForCall(i int) (db.SavedTeam, string) {
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	return fake.getProviderArgsForCall[i].arg1, fake.getProviderArgsForCall[i].arg2
}

func (fake *FakeProviderFactory) GetProviderReturns(result1 provider.Provider, result2 bool, result3 error) {
	fake.GetProviderStub = nil
	fake.getProviderReturns = struct {
		result1 provider.Provider
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeProviderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProviderMutex.RLock()
	defer fake.getProviderMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeProviderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.ProviderFactory = new(FakeProviderFactory)
