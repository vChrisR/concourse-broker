// This file was generated by counterfeiter
package authfakes

import (
	"net/http"
	"sync"

	"github.com/concourse/atc/auth"
)

type FakeValidator struct {
	IsAuthenticatedStub        func(*http.Request) bool
	isAuthenticatedMutex       sync.RWMutex
	isAuthenticatedArgsForCall []struct {
		arg1 *http.Request
	}
	isAuthenticatedReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValidator) IsAuthenticated(arg1 *http.Request) bool {
	fake.isAuthenticatedMutex.Lock()
	fake.isAuthenticatedArgsForCall = append(fake.isAuthenticatedArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("IsAuthenticated", []interface{}{arg1})
	fake.isAuthenticatedMutex.Unlock()
	if fake.IsAuthenticatedStub != nil {
		return fake.IsAuthenticatedStub(arg1)
	} else {
		return fake.isAuthenticatedReturns.result1
	}
}

func (fake *FakeValidator) IsAuthenticatedCallCount() int {
	fake.isAuthenticatedMutex.RLock()
	defer fake.isAuthenticatedMutex.RUnlock()
	return len(fake.isAuthenticatedArgsForCall)
}

func (fake *FakeValidator) IsAuthenticatedArgsForCall(i int) *http.Request {
	fake.isAuthenticatedMutex.RLock()
	defer fake.isAuthenticatedMutex.RUnlock()
	return fake.isAuthenticatedArgsForCall[i].arg1
}

func (fake *FakeValidator) IsAuthenticatedReturns(result1 bool) {
	fake.IsAuthenticatedStub = nil
	fake.isAuthenticatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isAuthenticatedMutex.RLock()
	defer fake.isAuthenticatedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Validator = new(FakeValidator)
