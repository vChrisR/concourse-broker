// This file was generated by counterfeiter
package authfakes

import (
	"sync"

	"github.com/concourse/atc/auth"
	"github.com/concourse/atc/db"
)

type FakeBuildsDB struct {
	GetBuildByIDStub        func(buildID int) (db.Build, bool, error)
	getBuildByIDMutex       sync.RWMutex
	getBuildByIDArgsForCall []struct {
		buildID int
	}
	getBuildByIDReturns struct {
		result1 db.Build
		result2 bool
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildsDB) GetBuildByID(buildID int) (db.Build, bool, error) {
	fake.getBuildByIDMutex.Lock()
	fake.getBuildByIDArgsForCall = append(fake.getBuildByIDArgsForCall, struct {
		buildID int
	}{buildID})
	fake.recordInvocation("GetBuildByID", []interface{}{buildID})
	fake.getBuildByIDMutex.Unlock()
	if fake.GetBuildByIDStub != nil {
		return fake.GetBuildByIDStub(buildID)
	} else {
		return fake.getBuildByIDReturns.result1, fake.getBuildByIDReturns.result2, fake.getBuildByIDReturns.result3
	}
}

func (fake *FakeBuildsDB) GetBuildByIDCallCount() int {
	fake.getBuildByIDMutex.RLock()
	defer fake.getBuildByIDMutex.RUnlock()
	return len(fake.getBuildByIDArgsForCall)
}

func (fake *FakeBuildsDB) GetBuildByIDArgsForCall(i int) int {
	fake.getBuildByIDMutex.RLock()
	defer fake.getBuildByIDMutex.RUnlock()
	return fake.getBuildByIDArgsForCall[i].buildID
}

func (fake *FakeBuildsDB) GetBuildByIDReturns(result1 db.Build, result2 bool, result3 error) {
	fake.GetBuildByIDStub = nil
	fake.getBuildByIDReturns = struct {
		result1 db.Build
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBuildsDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBuildByIDMutex.RLock()
	defer fake.getBuildByIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBuildsDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.BuildsDB = new(FakeBuildsDB)
