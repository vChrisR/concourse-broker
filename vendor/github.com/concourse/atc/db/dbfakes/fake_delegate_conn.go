// This file was generated by counterfeiter
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
	"github.com/jackc/pgx"
)

type FakeDelegateConn struct {
	QueryStub        func(sql string, args ...interface{}) (*pgx.Rows, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		sql  string
		args []interface{}
	}
	queryReturns struct {
		result1 *pgx.Rows
		result2 error
	}
	QueryRowStub        func(sql string, args ...interface{}) *pgx.Row
	queryRowMutex       sync.RWMutex
	queryRowArgsForCall []struct {
		sql  string
		args []interface{}
	}
	queryRowReturns struct {
		result1 *pgx.Row
	}
	ExecStub        func(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		sql       string
		arguments []interface{}
	}
	execReturns struct {
		result1 pgx.CommandTag
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDelegateConn) Query(sql string, args ...interface{}) (*pgx.Rows, error) {
	fake.queryMutex.Lock()
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		sql  string
		args []interface{}
	}{sql, args})
	fake.recordInvocation("Query", []interface{}{sql, args})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(sql, args...)
	} else {
		return fake.queryReturns.result1, fake.queryReturns.result2
	}
}

func (fake *FakeDelegateConn) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeDelegateConn) QueryArgsForCall(i int) (string, []interface{}) {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].sql, fake.queryArgsForCall[i].args
}

func (fake *FakeDelegateConn) QueryReturns(result1 *pgx.Rows, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 *pgx.Rows
		result2 error
	}{result1, result2}
}

func (fake *FakeDelegateConn) QueryRow(sql string, args ...interface{}) *pgx.Row {
	fake.queryRowMutex.Lock()
	fake.queryRowArgsForCall = append(fake.queryRowArgsForCall, struct {
		sql  string
		args []interface{}
	}{sql, args})
	fake.recordInvocation("QueryRow", []interface{}{sql, args})
	fake.queryRowMutex.Unlock()
	if fake.QueryRowStub != nil {
		return fake.QueryRowStub(sql, args...)
	} else {
		return fake.queryRowReturns.result1
	}
}

func (fake *FakeDelegateConn) QueryRowCallCount() int {
	fake.queryRowMutex.RLock()
	defer fake.queryRowMutex.RUnlock()
	return len(fake.queryRowArgsForCall)
}

func (fake *FakeDelegateConn) QueryRowArgsForCall(i int) (string, []interface{}) {
	fake.queryRowMutex.RLock()
	defer fake.queryRowMutex.RUnlock()
	return fake.queryRowArgsForCall[i].sql, fake.queryRowArgsForCall[i].args
}

func (fake *FakeDelegateConn) QueryRowReturns(result1 *pgx.Row) {
	fake.QueryRowStub = nil
	fake.queryRowReturns = struct {
		result1 *pgx.Row
	}{result1}
}

func (fake *FakeDelegateConn) Exec(sql string, arguments ...interface{}) (commandTag pgx.CommandTag, err error) {
	fake.execMutex.Lock()
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		sql       string
		arguments []interface{}
	}{sql, arguments})
	fake.recordInvocation("Exec", []interface{}{sql, arguments})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(sql, arguments...)
	} else {
		return fake.execReturns.result1, fake.execReturns.result2
	}
}

func (fake *FakeDelegateConn) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeDelegateConn) ExecArgsForCall(i int) (string, []interface{}) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].sql, fake.execArgsForCall[i].arguments
}

func (fake *FakeDelegateConn) ExecReturns(result1 pgx.CommandTag, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 pgx.CommandTag
		result2 error
	}{result1, result2}
}

func (fake *FakeDelegateConn) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.queryRowMutex.RLock()
	defer fake.queryRowMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDelegateConn) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DelegateConn = new(FakeDelegateConn)
