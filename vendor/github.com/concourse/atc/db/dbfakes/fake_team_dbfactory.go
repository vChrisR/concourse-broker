// This file was generated by counterfeiter
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeTeamDBFactory struct {
	GetTeamDBStub        func(string) db.TeamDB
	getTeamDBMutex       sync.RWMutex
	getTeamDBArgsForCall []struct {
		arg1 string
	}
	getTeamDBReturns struct {
		result1 db.TeamDB
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTeamDBFactory) GetTeamDB(arg1 string) db.TeamDB {
	fake.getTeamDBMutex.Lock()
	fake.getTeamDBArgsForCall = append(fake.getTeamDBArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTeamDB", []interface{}{arg1})
	fake.getTeamDBMutex.Unlock()
	if fake.GetTeamDBStub != nil {
		return fake.GetTeamDBStub(arg1)
	} else {
		return fake.getTeamDBReturns.result1
	}
}

func (fake *FakeTeamDBFactory) GetTeamDBCallCount() int {
	fake.getTeamDBMutex.RLock()
	defer fake.getTeamDBMutex.RUnlock()
	return len(fake.getTeamDBArgsForCall)
}

func (fake *FakeTeamDBFactory) GetTeamDBArgsForCall(i int) string {
	fake.getTeamDBMutex.RLock()
	defer fake.getTeamDBMutex.RUnlock()
	return fake.getTeamDBArgsForCall[i].arg1
}

func (fake *FakeTeamDBFactory) GetTeamDBReturns(result1 db.TeamDB) {
	fake.GetTeamDBStub = nil
	fake.getTeamDBReturns = struct {
		result1 db.TeamDB
	}{result1}
}

func (fake *FakeTeamDBFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTeamDBMutex.RLock()
	defer fake.getTeamDBMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTeamDBFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.TeamDBFactory = new(FakeTeamDBFactory)
