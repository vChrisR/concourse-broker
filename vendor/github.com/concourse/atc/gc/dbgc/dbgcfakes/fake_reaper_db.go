// This file was generated by counterfeiter
package dbgcfakes

import (
	"sync"

	"github.com/concourse/atc/gc/dbgc"
)

type FakeReaperDB struct {
	ReapExpiredContainersStub        func() error
	reapExpiredContainersMutex       sync.RWMutex
	reapExpiredContainersArgsForCall []struct{}
	reapExpiredContainersReturns     struct {
		result1 error
	}
	ReapExpiredVolumesStub        func() error
	reapExpiredVolumesMutex       sync.RWMutex
	reapExpiredVolumesArgsForCall []struct{}
	reapExpiredVolumesReturns     struct {
		result1 error
	}
	ReapExpiredWorkersStub        func() error
	reapExpiredWorkersMutex       sync.RWMutex
	reapExpiredWorkersArgsForCall []struct{}
	reapExpiredWorkersReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReaperDB) ReapExpiredContainers() error {
	fake.reapExpiredContainersMutex.Lock()
	fake.reapExpiredContainersArgsForCall = append(fake.reapExpiredContainersArgsForCall, struct{}{})
	fake.recordInvocation("ReapExpiredContainers", []interface{}{})
	fake.reapExpiredContainersMutex.Unlock()
	if fake.ReapExpiredContainersStub != nil {
		return fake.ReapExpiredContainersStub()
	} else {
		return fake.reapExpiredContainersReturns.result1
	}
}

func (fake *FakeReaperDB) ReapExpiredContainersCallCount() int {
	fake.reapExpiredContainersMutex.RLock()
	defer fake.reapExpiredContainersMutex.RUnlock()
	return len(fake.reapExpiredContainersArgsForCall)
}

func (fake *FakeReaperDB) ReapExpiredContainersReturns(result1 error) {
	fake.ReapExpiredContainersStub = nil
	fake.reapExpiredContainersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReaperDB) ReapExpiredVolumes() error {
	fake.reapExpiredVolumesMutex.Lock()
	fake.reapExpiredVolumesArgsForCall = append(fake.reapExpiredVolumesArgsForCall, struct{}{})
	fake.recordInvocation("ReapExpiredVolumes", []interface{}{})
	fake.reapExpiredVolumesMutex.Unlock()
	if fake.ReapExpiredVolumesStub != nil {
		return fake.ReapExpiredVolumesStub()
	} else {
		return fake.reapExpiredVolumesReturns.result1
	}
}

func (fake *FakeReaperDB) ReapExpiredVolumesCallCount() int {
	fake.reapExpiredVolumesMutex.RLock()
	defer fake.reapExpiredVolumesMutex.RUnlock()
	return len(fake.reapExpiredVolumesArgsForCall)
}

func (fake *FakeReaperDB) ReapExpiredVolumesReturns(result1 error) {
	fake.ReapExpiredVolumesStub = nil
	fake.reapExpiredVolumesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReaperDB) ReapExpiredWorkers() error {
	fake.reapExpiredWorkersMutex.Lock()
	fake.reapExpiredWorkersArgsForCall = append(fake.reapExpiredWorkersArgsForCall, struct{}{})
	fake.recordInvocation("ReapExpiredWorkers", []interface{}{})
	fake.reapExpiredWorkersMutex.Unlock()
	if fake.ReapExpiredWorkersStub != nil {
		return fake.ReapExpiredWorkersStub()
	} else {
		return fake.reapExpiredWorkersReturns.result1
	}
}

func (fake *FakeReaperDB) ReapExpiredWorkersCallCount() int {
	fake.reapExpiredWorkersMutex.RLock()
	defer fake.reapExpiredWorkersMutex.RUnlock()
	return len(fake.reapExpiredWorkersArgsForCall)
}

func (fake *FakeReaperDB) ReapExpiredWorkersReturns(result1 error) {
	fake.ReapExpiredWorkersStub = nil
	fake.reapExpiredWorkersReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReaperDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reapExpiredContainersMutex.RLock()
	defer fake.reapExpiredContainersMutex.RUnlock()
	fake.reapExpiredVolumesMutex.RLock()
	defer fake.reapExpiredVolumesMutex.RUnlock()
	fake.reapExpiredWorkersMutex.RLock()
	defer fake.reapExpiredWorkersMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeReaperDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbgc.ReaperDB = new(FakeReaperDB)
