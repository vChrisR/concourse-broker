// This file was generated by counterfeiter
package execfakes

import (
	"sync"

	"github.com/concourse/atc/exec"
)

type FakeStepFactory struct {
	UsingStub        func(exec.Step, *exec.SourceRepository) exec.Step
	usingMutex       sync.RWMutex
	usingArgsForCall []struct {
		arg1 exec.Step
		arg2 *exec.SourceRepository
	}
	usingReturns struct {
		result1 exec.Step
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStepFactory) Using(arg1 exec.Step, arg2 *exec.SourceRepository) exec.Step {
	fake.usingMutex.Lock()
	fake.usingArgsForCall = append(fake.usingArgsForCall, struct {
		arg1 exec.Step
		arg2 *exec.SourceRepository
	}{arg1, arg2})
	fake.recordInvocation("Using", []interface{}{arg1, arg2})
	fake.usingMutex.Unlock()
	if fake.UsingStub != nil {
		return fake.UsingStub(arg1, arg2)
	} else {
		return fake.usingReturns.result1
	}
}

func (fake *FakeStepFactory) UsingCallCount() int {
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	return len(fake.usingArgsForCall)
}

func (fake *FakeStepFactory) UsingArgsForCall(i int) (exec.Step, *exec.SourceRepository) {
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	return fake.usingArgsForCall[i].arg1, fake.usingArgsForCall[i].arg2
}

func (fake *FakeStepFactory) UsingReturns(result1 exec.Step) {
	fake.UsingStub = nil
	fake.usingReturns = struct {
		result1 exec.Step
	}{result1}
}

func (fake *FakeStepFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.usingMutex.RLock()
	defer fake.usingMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeStepFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.StepFactory = new(FakeStepFactory)
